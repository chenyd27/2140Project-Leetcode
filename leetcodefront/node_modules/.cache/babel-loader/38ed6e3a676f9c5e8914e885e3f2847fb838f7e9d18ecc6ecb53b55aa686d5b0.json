{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport Home from '../components/Home.vue';\nimport Welcome from '../components/Welcome.vue';\nimport UserList from '../components/admin/UserList.vue';\nVue.use(VueRouter);\nconst routes = [{\n  path: \"/\",\n  redirect: \"/home\" // 首页重定向\n}, {\n  path: \"/home\",\n  component: Home,\n  redirect: \"/user\",\n  children: [\n  // 自组件\n  {\n    path: \"/welcome\",\n    component: Welcome\n  }, {\n    path: \"/user\",\n    component: UserList\n  }]\n}];\nconst router = new VueRouter({\n  routes\n});\n\n// 未跳转时使用\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location, onResolve, onReject) {\n  if (onResolve || onReject) return originalPush.call(this, location, onResolve, onReject);\n  return originalPush.call(this, location).catch(err => err);\n};\n// 挂载路由导航守卫\nrouter.beforeEach((to, from, next) => {\n  // to 将要访问\n  // from 从哪访问\n  // next 接着干的事,next(url) 重定向到url，空则继续访问 to 的路径\n  if (to.path == '/login') return next();\n  // 获取 user\n  const userFlag = window.sessionStorage.getItem(\"user\");\n  // 判断是否为空\n  if (!userFlag) return next('/login'); // 无值返回登陆页\n  next(); // 符合要求\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","Home","Welcome","UserList","use","routes","path","redirect","component","children","router","originalPush","prototype","push","location","onResolve","onReject","call","catch","err","beforeEach","to","from","next","userFlag","window","sessionStorage","getItem"],"sources":["/Users/chenyida/leetcodeSearch/leetcodefront/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport Home from '../components/Home.vue'\nimport Welcome from '../components/Welcome.vue'\nimport UserList from '../components/admin/UserList.vue'\n\nVue.use(VueRouter)\n\nconst routes = [{\n    path: \"/\",\n    redirect: \"/home\", // 首页重定向\n}, {\n    path: \"/home\",\n    component: Home,\n    redirect: \"/user\",\n    children: [ // 自组件\n        { path: \"/welcome\", component: Welcome, },\n        { path: \"/user\", component: UserList, }\n    ]\n}]\n\nconst router = new VueRouter({\n    routes\n})\n\n// 未跳转时使用\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location, onResolve, onReject) {\n        if (onResolve || onReject) return originalPush.call(this, location, onResolve, onReject);\n        return originalPush.call(this, location).catch(err => err);\n    }\n    // 挂载路由导航守卫\nrouter.beforeEach((to, from, next) => {\n    // to 将要访问\n    // from 从哪访问\n    // next 接着干的事,next(url) 重定向到url，空则继续访问 to 的路径\n    if (to.path == '/login') return next();\n    // 获取 user\n    const userFlag = window.sessionStorage.getItem(\"user\");\n    // 判断是否为空\n    if (!userFlag) return next('/login'); // 无值返回登陆页\n    next(); // 符合要求\n})\n\nexport default router"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,QAAQ,MAAM,kCAAkC;AAEvDJ,GAAG,CAACK,GAAG,CAACJ,SAAS,CAAC;AAElB,MAAMK,MAAM,GAAG,CAAC;EACZC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE,OAAO,CAAE;AACvB,CAAC,EAAE;EACCD,IAAI,EAAE,OAAO;EACbE,SAAS,EAAEP,IAAI;EACfM,QAAQ,EAAE,OAAO;EACjBE,QAAQ,EAAE;EAAE;EACR;IAAEH,IAAI,EAAE,UAAU;IAAEE,SAAS,EAAEN;EAAS,CAAC,EACzC;IAAEI,IAAI,EAAE,OAAO;IAAEE,SAAS,EAAEL;EAAU,CAAC;AAE/C,CAAC,CAAC;AAEF,MAAMO,MAAM,GAAG,IAAIV,SAAS,CAAC;EACzBK;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMM,YAAY,GAAGX,SAAS,CAACY,SAAS,CAACC,IAAI;AAC7Cb,SAAS,CAACY,SAAS,CAACC,IAAI,GAAG,SAASA,IAAI,CAACC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAE;EAChE,IAAID,SAAS,IAAIC,QAAQ,EAAE,OAAOL,YAAY,CAACM,IAAI,CAAC,IAAI,EAAEH,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,CAAC;EACxF,OAAOL,YAAY,CAACM,IAAI,CAAC,IAAI,EAAEH,QAAQ,CAAC,CAACI,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;AAC9D,CAAC;AACD;AACJT,MAAM,CAACU,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC;EACA;EACA;EACA,IAAIF,EAAE,CAACf,IAAI,IAAI,QAAQ,EAAE,OAAOiB,IAAI,EAAE;EACtC;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;EACtD;EACA,IAAI,CAACH,QAAQ,EAAE,OAAOD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtCA,IAAI,EAAE,CAAC,CAAC;AACZ,CAAC,CAAC;;AAEF,eAAeb,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}